/**
 * MOTECH PLATFORM OPENSOURCE LICENSE AGREEMENT
 *
 * Copyright (c) 2010 The Trustees of Columbia University in the City of
 * New York and Grameen Foundation USA.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Grameen Foundation USA, Columbia University, or
 * their respective contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY GRAMEEN FOUNDATION USA, COLUMBIA UNIVERSITY
 * AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL GRAMEEN FOUNDATION
 * USA, COLUMBIA UNIVERSITY OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.motechproject.mobile.imp.serivce.oxd;

import org.apache.log4j.Logger;
import org.fcitmuk.epihandy.EpihandyXformSerializer;
import org.fcitmuk.epihandy.FormNotFoundException;
import org.motechproject.mobile.core.model.IncomingMessage;
import org.motechproject.mobile.core.model.MxFormProcessingResponse;
import org.motechproject.mobile.imp.serivce.*;
import org.motechproject.mobile.imp.util.InMessageParser;
import org.motechproject.mobile.imp.util.exception.MotechParseException;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Implementation of the IncomingMessageProcessor Interface for processing Motech incoming xForms
 * generated by mForms mobile application.
 *
 * Creted 30-Nov-2010
 * @author Igor Opushnyev (iopushnyev@2paths.com)
 */
public class IncomingMxFormProcessorImpl implements IncomingMessageProcessor {

    private final Logger log = Logger.getLogger(this.getClass());

    private FormDefinitionService formService;
    private IMPService impService;
    private StudyProcessor studyProcessor;
    private InMessageParser inMessageParser;

	private long maxProcessingTime;
    //private String


    public MxFormProcessingResponse processIncomingMessage(final String incomingMessageSerialized)
            throws MessageProcessException, MessageDeserializationException {

        long startTime = System.currentTimeMillis();

        DataInputStream dataInput = new DataInputStream(new ByteArrayInputStream(incomingMessageSerialized.getBytes()));

        //TODO - add user authentication
        String name;
        String password;
        String serializer;
        String locale;
        byte action;

        try {
            name = dataInput.readUTF();
            password = dataInput.readUTF();
            serializer = dataInput.readUTF();
            locale = dataInput.readUTF();
            action = dataInput.readByte();
        } catch (IOException e) {
            //TODO - handle exception properly
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

        EpihandyXformSerializer serObj = new EpihandyXformSerializer();
        serObj.addDeserializationListener(studyProcessor);

        try {
            Map<Integer, String> formVersionMap = formService.getXForms();
            serObj.deserializeStudiesWithEvents(dataInput, formVersionMap);
        } catch (FormNotFoundException fne) {
            throw new XFormDefinitionNotFoundException(fne.getMessage());

        } catch (Exception e) {
            throw new MessageDeserializationException(e);
        }

        String[][] studyForms = studyProcessor.getConvertedStudies();
        int numForms = studyProcessor.getNumForms();

        log.debug("upload contains: studies=" + studyForms.length
                + ", forms=" + numForms);

        // Starting processing here, only process until we run out of time
        int processedForms = 0;
        int faultyForms = 0;
        List<List<String>> studyFormProcessingResults = new ArrayList<List<String>>(studyForms.length);
        if (studyForms != null && numForms > 0) {
            formprocessing:
            for (int i = 0; i < studyForms.length; i++) {
                List<String> formProcessingResults = new ArrayList<String>(studyForms[i].length);
                for (int j = 0; j < studyForms[i].length; j++, processedForms++) {


                    /*if (maxProcessingTime > 0
                                     && System.currentTimeMillis() - startTime > maxProcessingTime)
                             System.nanoTime();
                                 break formprocessing;*/

                    IncomingMessage incomingMessage = null;
                    String formProcessingResult = "System error";
                    try {
                        incomingMessage = inMessageParser.parseIncomingMessage(studyForms[i][j]);
                        impService.processIncomingMessage(incomingMessage);
                        formProcessingResult = impService.getFormProcessSuccess();
                    } catch (MotechParseException e) {
                        formProcessingResult = "\"Can not process form\\n\" + e.getMessage()";
                        log.error(formProcessingResult, e);
                        faultyForms++;
                    } catch (DuplicateProcessingException dpe) {
                         log.info("duplicate form in process, returning wait message");
                        faultyForms++;
                    } catch (DuplicateMessageException e) {
                        formProcessingResult = impService.getFormProcessSuccess();
                        log.warn("duplicate form:\n" + incomingMessage.getContent());
                    } catch (Exception ex) {
                        formProcessingResult = "processing form failed";
                        log.error(formProcessingResult, ex);
                    } finally {
                        formProcessingResults.add(formProcessingResult);
                    }
                }
                studyFormProcessingResults.add(formProcessingResults);
            }
        }

        return new MxFormProcessingResponse(processedForms, faultyForms, studyFormProcessingResults);
    }

    public void setFormService(FormDefinitionService formService) {
        this.formService = formService;
    }

    public void setImpService(IMPService impService) {
        this.impService = impService;
    }

    public void setStudyProcessor(StudyProcessor studyProcessor) {
        this.studyProcessor = studyProcessor;
    }

    public void setInMessageParser(InMessageParser inMessageParser) {
        this.inMessageParser = inMessageParser;
    }

    public void setMaxProcessingTime(long maxProcessingTime) {
        this.maxProcessingTime = maxProcessingTime;
    }
}


